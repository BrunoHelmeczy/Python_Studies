# %%
import os

if os.getcwd().split('\\')[-1] == 'Python_Studies':
    from DataCamp.Python.Plotly.my_utils import *
else:
    from my_utils import *

import plotly.express as px
import plotly.graph_objects as go

print(getData)


# %%
# custom buttons
rev = getData('revenue_data2.csv')

rev.loc[rev['Revenue'] == 'Unknown', 'Revenue'] = None
rev = rev.dropna(subset = 'Revenue')
rev['Revenue'] = rev['Revenue'].astype('int')

inds = ['Tech', 'Oil', 'Professional Services', 'Pharmaceuticals']

rev_sub = rev[rev['Industry'].isin(inds)]

# rev.columns
fig = px.bar(
    data_frame = rev_sub,
    x = 'Industry',
    y = 'Revenue',
    color = 'Industry'
)

buttons = [
    {
        'label': 'Bars',
        'method': 'update',
        'args': [{'type': 'bar'}]
    },
    {
        'label': 'Scatter',
        'method': 'update',
        'args': [{'type': 'scatter', 'mode': 'markers'}]
    }
]

# buttons --> 'args': [{dict1}, {dict2}]
    # dict1: dict to send to data
    # dict2: dict to send to layout
# dir(fig)
# dir(fig.layout)
# dir(fig.data[0])

fig.update_layout(
    updatemenus = [{
        'type': 'buttons',
        'direction': 'down',
        'x': 1.3, 'y': 0.5,
        'showactive': True,
        'active': 0, 
        'buttons': buttons
    }],
    showlegend = False
)


# %%
sales = getData('monthly_sales.csv')

# sales.dtypes
fig = go.Figure()

fig.add_trace(
    go.Bar(
        x = sales['Month'],
        y = sales['Sales Volume'],
        name = 'Sales Volume'
    )
)

fig.add_trace(
    go.Bar(
        x = sales['Month'],
        y = sales['Sales Value'],
        name = 'Sales Value'
    )
)

value_annotations = [{'text': 'Sept was the best' ,'showarrow': True, 'x': 'September', 'y': 345397 }]
volume_annotations = [{'text': 'Oct was the best', 'showarrow': True, 'x': 'October', 'y': 71900 }]

my_buttons = [
    {
        'label': "By Sales Value", 
        'method': "update", 
        'args': [{}, {'annotations': value_annotations}]
    },
    {
        'label': "By Sales Volume", 
        'method': "update", 
        'args': [{}, {'annotations': volume_annotations}]
    }
]

fig.update_layout(
    updatemenus = [{
        'type': 'buttons',
        'buttons': my_buttons,
        # 'showactive': True,
        'x': 1.3, 'y': 0.5
    }]
)



# %%
# dropdowns --> add all traaces & show/hide with (dropdown) buttons

pop = getData('world_bank_population.csv').dropna()
countries = ['Australia', 'Austria', 'Hungary']
series_cols = ['Series Name', 'Series Code']

pop = pop[pop['Country Name'].isin(countries)].drop(
    series_cols, 
    axis = 1
)

pop_long = pd.melt(
    pop,
    id_vars = ['Country Name', 'Country Code'],
    var_name = 'year',
    value_name = 'population'
)

pop_long['year'] = pop_long['year'].str.replace(' .+', '', regex = True).astype('int')
pop_long['population'] = pop_long['population'].astype('int')

fig = go.Figure()
# code = pop_long['Country Code'].unique()[0]
for code in pop_long['Country Code'].unique():
    df = pop_long[pop_long['Country Code'] == code]

    fig.add_trace(
        go.Scatter(
        # go.Line(
            x = df['year'],
            y = df['population'],
            name = code
            , mode = 'lines'
        )
    )


dropdowns = [
    {'label': 'All', 'method': 'update', 'args': [
        {'visible': [True,  True,  True]},  
        {'title': 'All'}]
    },
    {'label': 'AUS', 'method': 'update', 'args': [
        {'visible': [True,  False, False], 'colors': 'blue'}, 
        {'title': 'AUS'}]
    },
    {'label': 'AUT', 'method': 'update', 'args': [
        {'visible': [False, True,  False], 'colors': 'red'}, 
        {'title': 'AUT'}]
    },
    {'label': 'HUN', 'method': 'update', 'args': [
        {'visible': [False, False, True]},  
        {'title': 'HUN', 'linecolor': 'green'}]
    }
]

fig.update_layout(
    updatemenus = [{
        'active': 0,
        'buttons': dropdowns
    }]
)



# %%
# rev_sub

# rev_sub['employees'] = rev_sub['employees'].str.replace(',', '', regex = True).astype('int')

# rev_sub.dtypes

fig = px.scatter(
    data_frame = rev_sub,
    x = 'employees',
    y = 'Revenue',
    color = 'Industry',
    animation_frame = 'Industry',
    animation_group = 'Company'
).update_layout(
    xaxis = {'range': [-100000, 2500000]}, 
    yaxis = {'range': [0, 500000]}
)


fig['layout'].pop('updatemenus')
fig
# %%
